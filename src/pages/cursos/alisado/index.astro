---
import { supabase } from "../../../lib/supabase.js";
const { cookies, redirect } = Astro;
import Layout from "../../../layouts/Layout.astro";
import List from "../../../components/SubIndexList.astro";
import Button from "../../../components/CompleteButton.astro";

// Define interfaces para la estructura de las etapas y subíndices
interface SubIndex {
    id: string;
    title: string;
    description: string;
    stage_id: string;
}

interface Stage {
    id: string;
    title: string;
    description: string;
    order: number;
}

const accessToken = cookies.get("sb-access-token");
const refreshToken = cookies.get("sb-refresh-token");

if (!accessToken || !refreshToken) {
    return redirect("/signin");
}

const { data: session, error: sessionError } = await supabase.auth.setSession({
    refresh_token: refreshToken.value,
    access_token: accessToken.value,
});

if (sessionError) {
    cookies.delete("sb-access-token", { path: "/" });
    cookies.delete("sb-refresh-token", { path: "/" });
    return redirect("/signin");
}

const userId = session?.user?.id;
const { data: curso, error: cursoError } = await supabase
    .from("cursos")
    .select("id, title, description, img")
    .eq("title", "Alaciado")
    .single();

if (cursoError || !curso) {
    console.error(
        "Error al buscar el curso 'Alaciado':",
        cursoError?.message || "Curso no encontrado",
    );
}

let detallesCurso = null;
if (curso) {
    const { data: cursoVinculado, error: vinculoError } = await supabase
        .from("usuarios_cursos")
        .select("curso_id")
        .eq("usuario_id", userId)
        .eq("curso_id", curso.id);

    if (vinculoError) {
        console.error(
            "Error al verificar el acceso al curso:",
            vinculoError.message,
        );
    } else if (cursoVinculado?.length > 0) {
        detallesCurso = {
            title: curso.title,
            description: curso.description,
            img: curso.img,
        };
    }
}

const { data: etapas, error: etapasConSubindicesError } = await supabase
    .from("stages")
    .select("id, title, description, order")
    .eq("course_id", curso.id)
    .order("order");

if (etapasConSubindicesError) {
    console.error(
        "Error al cargar las etapas:",
        etapasConSubindicesError.message,
    );
}

// Obtener los subíndices
const { data: subindices, error: subindicesError } = await supabase
    .from("subindice")
    .select("id, title, description, stage_id");

if (subindicesError) {
    console.error("Error al cargar los subíndices:", subindicesError.message);
} else {
    console.log("Subíndices obtenidos:", subindices);
}

const { data: progreso, error: progresoError } = await supabase
    .from("progress")
    .select("stage_id, sub_index_id, completed")
    .eq("user_id", userId);

let progresoMap = {};
if (progreso && progreso.length > 0) {
    progreso.forEach((p) => {
        progresoMap[`${p.stage_id}-${p.sub_index_id}`] = p.completed;
    });
}
---

<Layout
    title="Curso: Alaciado"
    description="Detalles del curso Alaciado"
    lightColor={true}
>
    <section class="md:h-[75vh]">
        <div class="max-w-screen-lg mx-auto mt-10 md:block hidden">
            <div class="mb-4">
                <a
                    href="/dashboard"
                    class="text-xs cursor-pointer hover:text-[#a07c62]"
                >
                    <span>&larr;</span> Ir al Dashboard
                </a>
            </div>

            <div class="ml-2 md:mb-10 space-y-2">
                <h class="text-4xl font-thin">Curso de Alisado</h>
                <p class="text-base font-thin">
                    Descubre los secretos detrás de un alisado impecable con
                    nuestro curso especializado. Aprende técnicas avanzadas,
                    conoce los mejores productos y brinda a tus clientes
                    resultados duraderos y saludables.
                </p>
            </div>
        </div>
        <div
            class="max-w-screen-lg mx-auto grid grid-cols-1 md:grid-cols-3 gap-8"
        >
            <div class="md:col-span-2 md:order-1 order-3">
                <List />
            </div>
            <div class="max-w-screen-lg mx-auto md:hidden order-2 md:order-1">
                <div class="mb-6 ml-2">
                    <a
                        href="/dashboard"
                        class="text-xs cursor-pointer hover:text-[#a07c62]"
                    >
                        <span>&larr;</span> Ir al Dashboard
                    </a>
                </div>
                <div class="ml-2 md:mb-10 space-y-2">
                    <h class="text-4xl font-thin">Curso de Alisado</h>
                    <p class="text-base font-thin">
                        Descubre los secretos detrás de un alisado impecable con
                        nuestro curso especializado. Aprende técnicas avanzadas,
                        conoce los mejores productos y brinda a tus clientes
                        resultados duraderos y saludables.
                    </p>
                </div>
            </div>
            {
                detallesCurso?.img && (
                    <div class="md:col-span-1 top-16  flex justify-center md:order-2 order-1">
                        <img
                            src={detallesCurso.img}
                            alt={detallesCurso.description}
                            class="object-cover w-full h-full max-h-[35vh]"
                        />
                    </div>
                )
            }
        </div>
    </section>
</Layout>

<script>
    document.addEventListener("click", async (event) => {
        const target = (event.target as HTMLElement).closest(
            'button[id^="btn-complete"]',
        );
        if (!target) return; // Ignorar si no es un botón relevante

        // Obtener atributos necesarios
        const userId = target.getAttribute("data-user-id");
        const stageId = target.getAttribute("data-stage-id");
        const subIndexId = target.getAttribute("data-sub-index-id");

        if (!userId || !stageId || !subIndexId) {
            console.error("Error: Faltan parámetros requeridos");
            return;
        }

        try {
            const response = await fetch("/api/update-progress", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    user_id: userId,
                    stage_id: stageId,
                    sub_index_id: subIndexId,
                    completed: true,
                }),
            });

            const responseData = await response.json();

            if (!response.ok) {
                throw new Error(responseData.error || "Error desconocido");
            }

            // Cambiar estilo del botón
            target.classList.remove("text-gray-500");
            target.classList.add("text-green-500");
            target.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" class="w-5 h-5 fill-green-500">
                <path d="M438.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L160 338.7 393.4 105.4c12.5-12.5 32.8-12.5 45.3 0z"/>
            </svg>
            Completado
        `;
        } catch (error) {
            console.error("Error al actualizar progreso:", error);
        }
    });
</script>
