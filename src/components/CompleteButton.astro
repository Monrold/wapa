---
// CompleteButton.astro
import { supabase } from "../lib/supabase.js";

interface Props {
    subIndexId: string;
    stageId: string;
    redirectUrl: string;
}

const { subIndexId, stageId, redirectUrl } = Astro.props;
console.log("redirectUrl:", redirectUrl);

// Obtener el acceso al token desde las cookies
const { cookies } = Astro;
const accessToken = cookies.get("sb-access-token");
const refreshToken = cookies.get("sb-refresh-token");

let userId = null;

if (accessToken && refreshToken) {
    const { data: session, error: sessionError } = await import(
        "../lib/supabase.js"
    ).then(({ supabase }) =>
        supabase.auth.setSession({
            refresh_token: refreshToken.value,
            access_token: accessToken.value,
        }),
    );

    if (session && session.user) {
        userId = session.user.id; // Obtener el ID del usuario desde la sesión
    }
}

const { data: curso, error: cursoError } = await supabase
    .from("cursos")
    .select("id, title, description, img")
    .eq("title", "Alaciado")
    .single();

if (cursoError || !curso) {
    console.error(
        "Error al buscar el curso 'Alaciado':",
        cursoError?.message || "Curso no encontrado",
    );
}

const { data: progreso, error: progresoError } = await supabase
    .from("progress")
    .select("sub_index_id, completed");

const { data: etapas, error: etapasError } = await supabase
    .from("stages")
    .select("id, title, description, order")
    .eq("course_id", curso?.id) // Usamos el prop 'curso' aquí
    .order("order");

const { data: subindices, error: subindicesError } = await supabase
    .from("subindice")
    .select("id, title, description, stage_id, url");
---

<button
    id={`btn-complete-${stageId}-${subIndexId}`}
    class="ml-2 text-gray-500 flex"
    data-stage-id={stageId}
    data-sub-index-id={subIndexId}
    data-user-id={userId}
    data-subindice-title={subindices?.find((sub) => sub.id === subIndexId)?.url}
    data-redirect-url={redirectUrl}
>
    Siguiente <p class="pl-2">&rarr;</p>
</button>

{
    progreso?.find((p) => p.sub_index_id === subIndexId)?.completed === true ? (
        <p>por completar</p>
    ) : (
        <p>Completado</p>
    )
}

<script>
    document
        .querySelectorAll('button[id^="btn-complete"]')
        .forEach((button) => {
            button.addEventListener("click", async (event) => {
                const target = event.currentTarget as HTMLElement;
                const stageId = target.getAttribute("data-stage-id");
                const subIndexId = target.getAttribute("data-sub-index-id");
                const userId = target.getAttribute("data-user-id"); // Obtener el userId dinámico

                const nextLandingPage =
                    target.getAttribute("data-redirect-url") ||
                    target.dataset.subindiceTitle;

                if (!stageId || !subIndexId || !userId) {
                    console.error("Error: Faltan parámetros requeridos");
                    return;
                }

                // Verificación de los valores antes de enviar la solicitud
                console.log("Enviando datos:", {
                    stageId,
                    subIndexId,
                    userId,
                });

                try {
                    const response = await fetch("/api/update-progress", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify({
                            stage_id: stageId,
                            sub_index_id: subIndexId,
                            user_id: userId, // Incluir el userId dinámicamente
                            completed: true,
                        }),
                    });

                    const responseData = await response.json();

                    if (!response.ok) {
                        throw new Error(
                            responseData.error || "Error desconocido",
                        );
                    }

                    // Actualizar el estado local del progreso
                    target.classList.remove("text-gray-500");
                    target.classList.add("text-green-500");
                    target.innerHTML = "Completado"; // Cambia el texto cuando se complete

                    window.location.href = nextLandingPage; // Redirige a la URL proporcionada como prop
                } catch (error) {
                    console.error("Error al actualizar progreso:", error);
                }
            });
        });
</script>
