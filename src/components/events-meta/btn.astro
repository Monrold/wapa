---
const {
  href,
  text,
  className,
  eventName = "InitiateCheckout",
  eventData = { value: 0, currency: "MXN" },
} = Astro.props;
---

<a
  href={href}
  target="_blank"
  rel="noopener noreferrer"
  data-event-name={eventName}
  data-event-data={JSON.stringify(eventData)}
  class={`trackBtn ${className}`}
>
  {text}
</a>

<script is:inline>
(function () {
  function getCookie(name) {
    return decodeURIComponent(
      document.cookie
        .split("; ")
        .find((row) => row.startsWith(name + "="))
        ?.split("=")[1] || ""
    );
  }

  function sendEventAsync(customData, eventName) {
    const eventId = crypto.randomUUID();
    const fbp = getCookie("_fbp");
    const fbc = getCookie("_fbc");

    const user_data = {
      client_ip_address: "NO_HASH_IP",
      client_user_agent: navigator.userAgent,
      ...(fbp && { fbp }),
      ...(fbc && { fbc }),
    };

    // Pixel navegador
    if (window.fbq) {
      fbq("track", eventName, { ...customData, event_id: eventId });
    }

    // CAPI (sendBeacon)
    try {
      const payload = JSON.stringify({
        event_name: eventName,
        event_id: eventId,
        event_time: Math.floor(Date.now() / 1000),
        action_source: "website",
        event_source_url: window.location.href,
        user_data,
        custom_data: customData,
      });
      navigator.sendBeacon(
        "https://metaevents.soporte-draw.workers.dev",
        payload
      );
    } catch (err) {
      console.error("❌ Error al enviar evento CAPI:", err);
    }
  }

  function attachListeners() {
    document.querySelectorAll("a[data-event-name]").forEach((btn) => {
      if (btn.dataset.listenerAttached === "true") return;
      btn.dataset.listenerAttached = "true";

      btn.addEventListener("click", (e) => {
        e.preventDefault();

        let customData = { value: 0, currency: "MXN" };
        try {
          customData = btn.dataset.eventData
            ? JSON.parse(btn.dataset.eventData)
            : customData;
        } catch {}

        const eventName = btn.dataset.eventName;

        // Abrir nueva pestaña inmediatamente
        window.open(btn.href, "_blank", "noopener,noreferrer");

        // Enviar evento de forma asíncrona sin bloquear
        sendEventAsync(customData, eventName);
      });
    });
  }

  // Inicial
  attachListeners();
  new MutationObserver(attachListeners).observe(document.body, { childList: true, subtree: true });
})();
</script>
